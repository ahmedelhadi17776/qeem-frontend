name: Frontend CI

on:
  pull_request:
    branches: [develop, main]
  push:
    branches: [develop, main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Lint (ESLint)
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Format check (Prettier)
        run: npm run format:check

      - name: Create environment file
        run: |
          echo "NEXT_PUBLIC_API_URL=http://localhost:8000" > .env.local
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.local

      - name: Run tests
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build application
        run: npm run build

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Create environment file
        run: |
          echo "NEXT_PUBLIC_API_URL=http://localhost:8000" > .env.local
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.local

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          # Kill any existing process on port 3000
          pkill -f "next start" || true
          sleep 2
          npm start &
          sleep 15

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t qeem-frontend:test .

      - name: Test Docker image
        run: |
          docker run --rm -d --name qeem-frontend-test -p 3000:3000 qeem-frontend:test
          sleep 10
          curl -f http://localhost:3000 || exit 1
          docker stop qeem-frontend-test

  accessibility:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Create environment file
        run: |
          echo "NEXT_PUBLIC_API_URL=http://localhost:8000" > .env.local
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.local

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          # Kill any existing process on port 3000
          pkill -f "next start" || true
          sleep 2
          npm start &
          sleep 15

      - name: Run accessibility tests
        run: |
          npm install -g @axe-core/cli
          # Install matching Chrome and ChromeDriver versions
          npx browser-driver-manager install chrome
          # Run accessibility tests with proper ChromeDriver
          axe http://localhost:3000 --rules="document-title,landmark-one-main,page-has-heading-one" || echo "Accessibility issues found but not blocking build"
        continue-on-error: true
